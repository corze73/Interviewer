import OpenAI from 'openai';
import { getLLMConfig } from '../utils/env';

export interface AIMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface InterviewContext {
  jobTitle: string;
  company?: string;
  jobDescription?: string;
  skills: string[];
  candidateResponses: string[];
  currentQuestionNumber: number;
}

export class AIInterviewerService {
  private openai: OpenAI;
  private model: string;

  constructor() {
    const config = getLLMConfig();
    
    if (config.provider !== 'openai') {
      throw new Error('OpenAI configuration required for AI interviewer service');
    }

    this.openai = new OpenAI({
      apiKey: config.apiKey,
    });
    this.model = config.model;
  }

  async generateInitialQuestion(context: InterviewContext): Promise<string> {
    const systemPrompt = this.buildSystemPrompt(context);
    
    const messages: AIMessage[] = [
      { role: 'system', content: systemPrompt },
      { 
        role: 'user', 
        content: `Please generate an opening question for the interview. This is the first question, so make it welcoming and focused on getting to know the candidate.`
      }
    ];

    try {
      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: messages.map(msg => ({
          role: msg.role,
          content: msg.content
        })),
        max_tokens: 200,
        temperature: 0.7,
      });

      const question = completion.choices[0]?.message?.content?.trim();
      if (!question) {
        throw new Error('No question generated by AI');
      }

      return question;
    } catch (error) {
      console.error('Error generating initial question:', error);
      // Fallback to predefined question
      return `Hi! I'm excited to interview you for the ${context.jobTitle} position${context.company ? ` at ${context.company}` : ''}. Let's start with a simple question: Can you tell me about yourself and why you're interested in this role?`;
    }
  }

  async generateFollowUpQuestion(
    context: InterviewContext, 
    userResponse: string
  ): Promise<string> {
    const systemPrompt = this.buildSystemPrompt(context);
    
    const messages: AIMessage[] = [
      { role: 'system', content: systemPrompt },
      ...this.buildConversationHistory(context),
      { role: 'user', content: userResponse },
      { 
        role: 'user', 
        content: 'Based on my response, please generate the next interview question. Keep it relevant to the role and my previous answers.'
      }
    ];

    try {
      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: messages.map(msg => ({
          role: msg.role,
          content: msg.content
        })),
        max_tokens: 250,
        temperature: 0.7,
      });

      const question = completion.choices[0]?.message?.content?.trim();
      if (!question) {
        throw new Error('No follow-up question generated by AI');
      }

      return question;
    } catch (error) {
      console.error('Error generating follow-up question:', error);
      // Fallback to context-based question
      return this.getFallbackQuestion(context, userResponse);
    }
  }

  async generateInterviewSummary(context: InterviewContext): Promise<string> {
    const systemPrompt = `You are an expert interviewer analyzing a candidate's performance. 
    Provide a concise, professional summary of the interview including:
    - Key strengths demonstrated
    - Areas for improvement
    - Overall assessment
    - Recommendation (hire/no hire/needs further evaluation)`;

    const conversationHistory = this.buildConversationHistory(context);
    
    const messages: AIMessage[] = [
      { role: 'system', content: systemPrompt },
      ...conversationHistory,
      { 
        role: 'user', 
        content: 'Please provide a comprehensive interview summary and assessment.'
      }
    ];

    try {
      const completion = await this.openai.chat.completions.create({
        model: this.model,
        messages: messages.map(msg => ({
          role: msg.role,
          content: msg.content
        })),
        max_tokens: 500,
        temperature: 0.5,
      });

      return completion.choices[0]?.message?.content?.trim() || 'Summary could not be generated.';
    } catch (error) {
      console.error('Error generating interview summary:', error);
      return 'Interview completed. Summary could not be generated due to technical issues.';
    }
  }

  private buildSystemPrompt(context: InterviewContext): string {
    return `You are an expert technical interviewer conducting a professional interview.

ROLE DETAILS:
- Position: ${context.jobTitle}
- Company: ${context.company || 'the company'}
- Required Skills: ${context.skills.join(', ')}
- Job Description: ${context.jobDescription || 'Not provided'}

INTERVIEW GUIDELINES:
1. Ask relevant, professional questions appropriate for the role level
2. Follow up on candidate responses with deeper technical or behavioral questions
3. Keep questions conversational and natural
4. Focus on both technical skills and soft skills
5. Adapt questions based on candidate's experience level
6. Ask specific examples and situations
7. Keep responses concise and focused

QUESTION TYPES TO INCLUDE:
- Technical skills related to: ${context.skills.join(', ')}
- Problem-solving scenarios
- Past experience and projects
- Team collaboration
- Challenges and how they were overcome
- Career goals and motivations

Always be professional, encouraging, and thorough in your questioning.`;
  }

  private buildConversationHistory(context: InterviewContext): AIMessage[] {
    const messages: AIMessage[] = [];
    
    // Add previous Q&A pairs (simplified for now)
    context.candidateResponses.forEach((response, index) => {
      if (index > 0) { // Skip first response as it's handled separately
        messages.push({ role: 'assistant', content: `[Previous question ${index}]` });
        messages.push({ role: 'user', content: response });
      }
    });
    
    return messages;
  }

  private getFallbackQuestion(context: InterviewContext, userResponse: string): string {
    const response = userResponse.toLowerCase();
    
    // Simple fallback logic
    if (response.includes('experience') || response.includes('worked')) {
      return `Can you tell me about a specific project you worked on that relates to ${context.skills[0] || 'this role'}?`;
    } else if (response.includes('challenge') || response.includes('difficult')) {
      return 'How do you typically approach solving complex problems when you encounter them?';
    } else {
      return `What excites you most about working as a ${context.jobTitle}?`;
    }
  }
}

export const aiInterviewerService = new AIInterviewerService();